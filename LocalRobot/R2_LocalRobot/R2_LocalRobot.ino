#include <XM430.h>
#include <SoftwareSerial.h>



int Val_X[] = {
 650 ,
645 ,
639 ,
634 ,
634 ,
634 ,
634 ,
634 ,
634 ,
634 ,
634 ,
631 ,
625 ,
618 ,
611 ,
606 ,
604 ,
602 ,
602 ,
601 ,
599 ,
597 ,
595 ,
594 ,
593 ,
593 ,
593 ,
594 ,
595 ,
596 ,
595 ,
593 ,
590 ,
588 ,
586 ,
584 ,
579 ,
568 ,
557 ,
552 ,
547 ,
541 ,
532 ,
528 ,
529 ,
528 ,
523 ,
512 ,
497 ,
484 ,
474 ,
464 ,
450 ,
435 ,
420 ,
413 ,
415 ,
419 ,
421 ,
421 ,
413 ,
396 ,
365 ,
331 ,
290 ,
214 ,
156 ,
118 ,
85  ,
50  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
40  ,
95  ,
194 ,
253 ,
295 ,
334 ,
377 ,
423 ,
468 ,
514 ,
555 ,
597 ,
633 ,
676 ,
713 ,
738 ,
763 ,
795 ,
830 ,
894 ,
941 ,
975 ,
1012,
1044,
1073,
1096,
1120,
1146,
1167,
1182,
1187,
1187,
1186,
1186,
1188,
1193,
1197,
1198,
1188,
1182,
1182,
1183,
1180,
1175,
1170,
1167,
1168,
1172,
1147,
1090,
1021,
957 ,
896 ,
836 ,
781 ,
732 ,
686 ,
650 ,
625 ,
606 ,
590 ,
577 ,
570 ,
574 ,
584 ,
595 ,
601 ,
597 ,
579 ,
552 ,
517 ,
487 ,
463 ,
438 ,
415 ,
397 ,
376 ,
358 ,
342 ,
325 ,
313 ,
297 ,
269 ,
225 ,
178 ,
119 ,
60  ,
2 ,
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
10  , 
39  ,
87  ,
137 ,
184 ,
219 ,
243 ,
262 ,
282 ,
307 ,
343 ,
374 ,
410 ,
437 ,
463 ,
489 ,
519 ,
550 ,
594 ,
631 ,
669 ,
707 ,
746 ,
787 ,
835 ,
879 ,
928 ,
973 ,
1021,
1069,
1130,
1176,
1216,
1253,
1297,
1351,
1401,
1420,
1424,
1426,
1431,
1441,
1449,
1451,
1452,
1450,
1448,
1446,
1445,
1439,
1431,
1425,
1424,
1419,
1406,
1376,
1367,
1367,
1373,
1376,
1381,
1399,
1409,
1417,
1426,
1439,
1459,
1487,
1520,
1560,
1609,
1652,
1687,
1712,
1728,
1730,
1730,
1731,
1731,
1732,
1730,
1724,
1718,
1708,
1687,
1659,
1603,
1545,
1486,
1431,
1382,
1329,
1284,
1231,
1176,
1123,
1074,
1014,
955 ,
903 ,
850 ,
791 ,
658 ,
567 ,
491 ,
427 ,
371 ,
311 ,
254 ,
207 ,
162 ,
127 ,
92  ,
51  ,
9 ,
15  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
20  ,
15  ,
4 ,
49  ,
89  ,
126 ,
162 ,
191 ,
218 ,
233 ,
246 ,
265 ,
284 ,
303 ,
320 ,
336 ,
350 ,
362 ,
378 ,
394 ,
411 ,
429 ,
452 ,
477 ,
502 ,
534 ,
559 ,
584 ,
602 ,
610 ,
605 ,
593 ,
577 ,
551 ,
544 ,
539 ,
530 ,
524 ,
519 ,
518 ,
516 ,
512 ,
505 ,
492 ,
473 ,
450 ,
429 ,
410 ,
391 ,
367 ,
343 ,
310 ,
271 ,
223 ,
156 ,
98  ,
34  ,
42  ,
42  ,
42  ,
42  ,
42  ,
42  ,
42  ,
42  ,
42  ,
42  ,
42  ,
30  ,
23  ,
77  ,
130 ,
189 ,
254 ,
323 ,
401 ,
459 ,
511 ,
544 ,
567 ,
585 ,
629 ,
650 ,
645 ,
623 ,
593 ,
558 ,
534 ,
509 ,
471 ,
457 ,
451 ,
450 ,
455 ,
465 ,
481 ,
491 ,
493 ,
493 ,
492 ,
489 ,
481 ,
471 ,
454 ,
438 ,
435 ,
445 ,
466 ,
488 ,
500 ,
505 ,
508 ,
514 ,
533 ,
556 ,
566 ,
561 ,
571 ,
581 ,
591 ,
601 ,
610 ,
615 ,
620 ,
625 ,
630 ,
635 ,
645 ,
650 ,
650 ,
650   
};
int Val_Y[] = {
2254,
2254,
2253,
2254,
2253,
2253,
2253,
2253,
2254,
2253,
2254,
2253,
2254,
2253,
2253,
2253,
2253,
2253,
2253,
2253,
2253,
2253,
2253,
2253,
2250,
2243,
2230,
2217,
2205,
2194,
2184,
2169,
2151,
2127,
2098,
2065,
2028,
1991,
1957,
1922,
1886,
1850,
1816,
1781,
1749,
1718,
1686,
1654,
1622,
1597,
1575,
1558,
1543,
1530,
1523,
1522,
1521,
1521,
1520,
1517,
1514,
1511,
1510,
1508,
1508,
1508,
1508,
1507,
1506,
1506,
1506,
1506,
1506,
1506,
1507,
1506,
1507,
1507,
1506,
1507,
1507,
1506,
1507,
1507,
1506,
1507,
1507,
1507,
1507,
1507,
1507,
1507,
1507,
1507,
1507,
1507,
1507,
1507,
1508,
1508,
1508,
1508,
1508,
1508,
1508,
1508,
1508,
1507,
1508,
1508,
1508,
1508,
1508,
1508,
1508,
1507,
1508,
1507,
1508,
1508,
1508,
1508,
1509,
1515,
1530,
1551,
1576,
1605,
1673,
1723,
1759,
1792,
1821,
1837,
1846,
1852,
1856,
1860,
1860,
1860,
1860,
1860,
1860,
1860,
1860,
1860,
1860,
1860,
1860,
1860,
1860,
1859,
1859,
1860,
1860,
1860,
1857,
1844,
1824,
1800,
1771,
1742,
1710,
1682,
1651,
1621,
1586,
1568,
1557,
1552,
1551,
1552,
1551,
1550,
1551,
1551,
1551,
1551,
1551,
1551,
1553,
1558,
1570,
1585,
1602,
1623,
1648,
1675,
1703,
1735,
1810,
1848,
1868,
1876,
1877,
1877,
1876,
1876,
1875,
1875,
1875,
1875,
1872,
1861,
1845,
1828,
1813,
1797,
1782,
1768,
1756,
1743,
1730,
1717,
1703,
1690,
1675,
1660,
1649,
1640,
1632,
1623,
1614,
1608,
1603,
1602,
1602,
1602,
1610,
1629,
1648,
1673,
1698,
1723,
1751,
1780,
1814,
1848,
1884,
1920,
1952,
1979,
2004,
2024,
2048,
2068,
2091,
2119,
2147,
2171,
2187,
2195,
2198,
2205,
2217,
2226,
2237,
2245,
2247,
2248,
2248,
2248,
2247,
2247,
2247,
2247,
2246,
2244,
2240,
2230,
2217,
2202,
2184,
2162,
2139,
2116,
2092,
2070,
2047,
2016,
1988,
1960,
1935,
1909,
1888,
1866,
1839,
1814,
1775,
1740,
1712,
1684,
1651,
1617,
1575,
1563,
1561,
1561,
1561,
1561,
1561,
1561,
1561,
1562,
1562,
1562,
1562,
1562,
1562,
1562,
1562,
1562,
1562,
1563,
1565,
1565,
1565,
1565,
1566,
1566,
1566,
1566,
1566,
1566,
1566,
1566,
1567,
1568,
1571,
1579,
1589,
1597,
1607,
1618,
1630,
1661,
1675,
1682,
1688,
1696,
1702,
1708,
1717,
1734,
1752,
1775,
1804,
1836,
1872,
1909,
1950,
1988,
2024,
2058,
2091,
2130,
2171,
2212,
2252,
2283,
2309,
2333,
2362,
2397,
2436,
2476,
2517,
2556,
2594,
2628,
2658,
2678,
2689,
2700,
2715,
2732,
2750,
2766,
2785,
2805,
2829,
2847,
2863,
2881,
2897,
2907,
2909,
2909,
2909,
2908,
2902,
2878,
2842,
2801,
2762,
2652,
2584,
2539,
2495,
2450,
2400,
2354,
2310,
2270,
2232,
2200,
2171,
2140,
2106,
2070,
2029,
1983,
1937,
1893,
1856,
1826,
1798,
1771,
1747,
1726,
1708,
1694,
1682,
1672,
1666,
1663,
1663,
1663,
1663,
1663,
1664,
1669,
1675,
1683,
1692,
1701,
1717,
1733,
1758,
1792,
1833,
1885,
1941,
2037,
2092,
2136,
2173,
2214,
2247,
2273,
2292,
2308,
2314,
2316,
2316,
2316,
2316,
2315,
2315,
2313,
2312,
2311,
2309,
2308,
2308,
2308,
2300,
2290,
2290,
2290,
2285,
2285,
2285,
2280,
2280,
2275,
2275,
2270,
2270,
2260,
2260,
2260,
2259,
2258,
2256,
2254,
2254,
2254,
2254,
2254,
2254,
2254,
2254
};

float x ;
float y;
float easing = 0.19;
double easing_time = 200.00;

int x_Out;
int y_Out;

int numRows = 493;



//Software Serial (RX, TX)
SoftwareSerial toRS485(11, 10);

//motorID
byte servo1 = 0x19;
byte servo2 = 0x0E;

XM430 gimbal(&toRS485);

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  //Start the Serial communication: One for the Nano communication, and the other for the RS485

  gimbal.BeginRS485(1000000);
  //Enable Torque, without this function the motors will not move.
  gimbal.TorqueEnable(servo1, ON);
  gimbal.TorqueEnable(servo2, ON);

  
}

void loop() {
  x = Val_X[0];
  y = Val_Y[0];


  for (int i = 0; i < numRows; i++) {
    //eases data to write to servo
    float targetX = Val_X[i];
    float dx = targetX - x;
    x += dx * easing;
    x_Out = round(x);


    float targetY = Val_Y[i];
    float dy = targetY - y;
    y += dy * easing;
    y_Out = round(y);

    Serial.println (y_Out);
    gimbal.Goto(servo1,constrain( x_Out, 10, 1731));
    gimbal.Goto(servo2,constrain( y_Out,1200 , 2375));
    delay(1);
  }

  Serial.println("data_done");


  int  x_diff =  Val_X[0] - Val_X[numRows];   //x_diff = 
  int  y_diff =  Val_Y[0] - Val_Y[numRows];

  

 /*
  for (int i = 0; i < easing_time; i++)
  {
    x_Out = Val_X[0] + (x_diff * (double(i) / easing_time));
    y_Out = Val_Y[0] + (y_diff * (double(i) / easing_time));
    gimbal.Goto(servo1,constrain( x_Out, 20, 1470));
    gimbal.Goto(servo2,constrain( y_Out,1200 , 2375));
  }
  */

  //x_Out = Val_X[0];
  //y_Out = Val_Y[0];


}
